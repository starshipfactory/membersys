syntax = "proto2";

package config;

// Database configuration.
message DatabaseConfig {
    // Database configuration for Cassandra databases.
    message CassandraDBConfig {
        // Host name of the Cassandra database server to use.
        repeated string database_server = 1;

        // Name of the Cassandra database to use.
        optional string database_name = 2 [default="sfmembersys"];

        // Time (in milliseconds) to wait for a Cassandra connection,
        // 0 means unlimited.
        optional uint64 database_timeout = 3 [default=0];
    }

    // Database configuration for PostgreSQL databases.
    message PostgreSQLConfig {
        // Host name of the PostgreSQL server to use.
        optional string database_server = 1;

        // Name of the PostgreSQL database to use.
        optional string database_name = 2 [default="sfmembersys"];

        // PostgreSQL user name.
        optional string user = 3;

        // PostgreSQL user password.
        optional string password = 4;

        // SSL connection.
        optional bool ssl = 5 [default=false];
    }

    oneof db_config_oneof {
        CassandraDBConfig cassandra = 1;
        PostgreSQLConfig postgresql = 2;
    }
}

// Configuration for the authentication system.
message AuthenticationConfig {
    // Set the app name to this value. It may be displayed to the user when
    // authenticating.
    optional string app_name = 10 [default="Starship Factory Membership System"];

    // Path to the service X.509 certificate file for authenticating to the login service.
    required string cert_path = 11;

    // Path to the key for the service certificate, in PEM encoded DER format.
    required string key_path = 12;

    // A bundle of X.509 certificates for authenticating the login service.
    required string ca_bundle_path = 13;

    // DNS name of the login service to be used for authenticating users.
    optional string auth_server_host = 14 [default="login.ancient-solutions.com"];

    // Group an user should be a member of in order to use the admin interface
    required string auth_group = 15;

    // Specification of the X.509 key server to use for looking up certificates.
    // Leave empty to disable certificate lookups.
    optional string x509_keyserver_host = 16;

    // Number of certificates to be cached.
    optional int32 x509_certificate_cache_size = 17;
}

// Main configuration for the Starship Factory membership management system.
message MembersysConfig {
    // Database configuration.
    required DatabaseConfig database_config = 2;

    // Authentication configuration.
    required AuthenticationConfig authentication_config = 3;

    // Path to the directory with the HTML templates.
    required string template_dir = 4;

    // Use the X-Real-IP header set by a proxy to determine remote addresses.
    optional bool use_proxy_real_ip = 5 [default=false];

    // Show this many records on a result page.
    optional int32 result_page_size = 6 [default=25];
}

// LDAP configuration for actual user editing.
message LdapConfig {
    // First, the LDAP server URI.
    required string server = 1;

    // Special LDAP user to bind as for creating new accounts.
    required string super_user = 2;

    // Password for the superuser.
    required string super_password = 3;

    // LDAP search base everyhing is a part of.
    required string base = 4;

    // Suffix to append to new users, without the base.
    optional string new_user_suffix = 5 [default = "ou=People"];

    // Groups the new user should be made a member of.
    repeated string new_user_group = 6;

    // Primary GID which the new user should be assigned to.
    required uint32 new_user_gid = 7;

    // Default shell for new users.
    optional string new_user_shell = 8 [default = "/bin/bash"];

    // Path to the CA certificate to verify the LDAP server against.
    optional string ca_certificate = 9;

    // Groups which deleted users may be in and still be deleted.
    repeated string ignore_user_group = 10;
}

message WelcomeMailConfig {
    // Path to the template containing the welcome mail text.
    required string mail_template_path = 1;

    // Data to create a SMTP connection.
    // Name or address and port of the smtp server.
    required string smtp_server_address = 2;

    // Leave empty to use username instead.
    optional string identity = 3 [default = ""];

    // Username for the mail authentication.
    optional string username = 4;

    // Plaintext password for the mail authentication.
    optional string password = 5;

    // From field of the e-mail. E.g. "Membership System <membersys@example.com>"
    required string from = 7;

    // Mail address for the Reply-To header. E.g. "<mailinglist@example.com>"
    optional string reply_to = 8;

    // Subject
    required string subject = 9;
}

// Configuration for the process which creates new users from database wishes.
message MemberCreatorConfig {
    // Database configuration.
    required DatabaseConfig database_config = 1;

    // LDAP configuration.
    required LdapConfig ldap_config = 2;

    // Welcome Mail configuration.
    optional WelcomeMailConfig welcome_mail_config = 3;
}
